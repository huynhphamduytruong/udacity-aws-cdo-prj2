Description: TruongHPD - Udacity Cloud DevOps Project 2 - Server Stack

Parameters:
  EnvironmentName:
    Description: A name that is prefixed to resource names
    Type: String
  AmiIdToUse:
    Description: AMI ID to use as our base image
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  InstanceType:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - m1.small
      - m1.large
    Description: Enter t3.small, m1.small, or m1.large. Default is t3.small.
  S3BucketName:
    Type: String
    Description: S3 bucket where store the index.html file use to host on our server

Resources:
  # Security Group
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our test host
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the loadbalancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-${EnvironmentName}-Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  ServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ServerRole

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Auth:
          type: "S3"
          roleName: !Ref ServerRole
          buckets:
            - !Ref S3BucketName
      AWS::CloudFormation::Init:
        Comment: Install Web Application
        config:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              source: !Sub "http://${S3BucketName}.s3.amazonaws.com/index.html"
              mode: 000644
              owner: apache
              group: apache
              authentication: S3Auth
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !Ref AmiIdToUse
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ServerInstanceProfile
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -s ${AWS::StackName} -r WebAppLaunchConfig --region ${AWS::Region}

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        !Split [", ", Fn::ImportValue: !Sub "${EnvironmentName}-NETS-PRIV"]
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: 2
      MaxSize: 4

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: truonghpd-udacity-cdo-prj2
      Subnets:
        !Split [", ", Fn::ImportValue: !Sub "${EnvironmentName}-NETS-PUB"]
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: "80"
      Protocol: HTTP

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

Outputs:
  LoadBanlancerEndpoint:
    Description: This is the endpoint to use for accessing the LoadBalancer
    Value: !Sub "http://${WebAppLoadBalancer.DNSName}"
